<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ただくんぶろぐ</title>
    <link>https://tadakun8.github.io/post/</link>
    <description>Recent content in Posts on ただくんぶろぐ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 23 Jun 2021 23:04:20 +0900</lastBuildDate><atom:link href="https://tadakun8.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ぼくの投資方針(仮)</title>
      <link>https://tadakun8.github.io/post/invest/policy/</link>
      <pubDate>Wed, 23 Jun 2021 23:04:20 +0900</pubDate>
      
      <guid>https://tadakun8.github.io/post/invest/policy/</guid>
      <description>見るべき銘柄  amzn : Amazon msft : Microsoft appl : Apple googl : Google S&amp;amp;P500 ASML : 半導体メーカー 世界の8割の半導体メーカーが顧客らしい NVDA : NVIDIA  投資方針  一度買ったらそのまま持っておく SBIチャートで 6ヶ月 / 日足 / 25日線にタッチしたら買う  25日線より下がっていて、かつお金に余裕があれば買い続ける ただし、Amazonは株価が高いのでそれ以外で行う   毎日21時に株価をチェック  投資方針の根拠  はじめて買ったAmazonの株が失敗することなく上がり続けている そしてそれは25日線より下で買っていた 見るべき銘柄にあげたものは将来的にも上がり続けると予想しているため、25日線もしくはそれを下回れば安いと判断し買う  戒め  ルール以外では絶対に買わない 例え現在が調子が良くて株が上がり続けていても冷静になり、ルールに従っているかを確認する  見るべき銘柄以外の銘柄について  投資を積極的に行なっている企業の株はチェックしたい  </description>
    </item>
    
    <item>
      <title>【OverTheWire奮闘記】Bandit: Level19〜21</title>
      <link>https://tadakun8.github.io/post/over-the-wire/bandit/level19-21/</link>
      <pubDate>Sun, 20 Jun 2021 15:24:42 +0900</pubDate>
      
      <guid>https://tadakun8.github.io/post/over-the-wire/bandit/level19-21/</guid>
      <description>Level 19 Goal  The password for the next level is stored in a file readme in the homedirectory. Unfortunately, someone has modified .bashrc to log you out when you log in with SSH.
  パスワードはreadmeファイルにある 誰かが.bashrcファイルを修正し、SSHでログインするときにログアウトするように設定している  resolve # 以下はローカルで $ ssh -l bandit18 -p 2220 bandit.labs.overthewire.org cat readme This is a OverTheWire game server. More information on http://www.overthewire.org/wargames bandit18@bandit.labs.overthewire.org&#39;s password: IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x $ resolveまでにやったこと ログインできないので、sshでコマンド実行ならいけるかと思い、実行してみたらいけました。半信半疑でしたが、sshでコマンド実行するだけなのでログイン扱いにはならないみたいです。
Level 20 Goal  To gain access to the next level, you should use the setuid binary in the homedirectory.</description>
    </item>
    
    <item>
      <title>【OverTheWire奮闘記】Bandit: Level16〜18</title>
      <link>https://tadakun8.github.io/post/over-the-wire/bandit/level16-18/</link>
      <pubDate>Sun, 20 Jun 2021 11:22:59 +0900</pubDate>
      
      <guid>https://tadakun8.github.io/post/over-the-wire/bandit/level16-18/</guid>
      <description>Level 16 Goal  The password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL encryption. Helpful note: Getting &amp;ldquo;HEARTBEATING&amp;rdquo; and &amp;ldquo;Read R BLOCK&amp;rdquo;? Use -ign_eof and read the &amp;ldquo;CONNECTED COMMANDS&amp;rdquo; section in the manpage. Next to &amp;lsquo;R&amp;rsquo; and &amp;lsquo;Q&amp;rsquo;, the &amp;lsquo;B&amp;rsquo; command also works in this version of that command…
 resolve bandit15@bandit:~$ openssl s_client -connect localhost:30001 CONNECTED(00000003) depth=0 CN = localhost verify error:num=18:self signed certificate verify return:1 depth=0 CN = localhost verify return:1 --- Certificate chain 0 s:/CN=localhost i:/CN=localhost --- Server certificate -----BEGIN CERTIFICATE----- MIICBjCCAW+gAwIBAgIEfftLGTANBgkqhkiG9w0BAQUFADAUMRIwEAYDVQQDDAls b2NhbGhvc3QwHhcNMjEwNDEzMDgzODA3WhcNMjIwNDEzMDgzODA3WjAUMRIwEAYD VQQDDAlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMLfXBVa jVKDHlA3U+S0hBMJMJlfue3xKECpmx1Ajp4/khUuWwvPB7+wLjqasBO2WfFYJzcq z9t7FfAPIlYjgvOTQs5X4vQ1aGzanvnNn+1VknpOnFAJQBSFq6ZD3ipWrhwm9XZq 8CgFhTGp9IPthZp8Y0B7OgobhlMtXD/zLaTbAgMBAAGjZTBjMBQGA1UdEQQNMAuC CWxvY2FsaG9zdDBLBglghkgBhvhCAQ0EPhY8QXV0b21hdGljYWxseSBnZW5lcmF0 ZWQgYnkgTmNhdC4gU2VlIGh0dHBzOi8vbm1hcC5vcmcvbmNhdC8uMA0GCSqGSIb3 DQEBBQUAA4GBAMFH9rsZovwnb5k71/MpyCnXEwGlIhixUu6qfi1kiFvhJ6lJCvaO weOYxV4oJy1OEB0LSEAQOnSPfzC8dDasijFcdVhuIGGPuQ2GZ05nCiiIZUNnrMRB 0z2RuRxgxMVjOvcSIJyvwyjVH4jY4I434fMyldePLxO1POLd1cxoKNTO -----END CERTIFICATE----- subject=/CN=localhost issuer=/CN=localhost --- No client certificate CA names sent Peer signing digest: SHA512 Server Temp Key: X25519, 253 bits --- SSL handshake has read 1019 bytes and written 269 bytes Verification error: self signed certificate --- New, TLSv1.</description>
    </item>
    
    <item>
      <title>【OverTheWire奮闘記】Bandit: Level14〜15</title>
      <link>https://tadakun8.github.io/post/over-the-wire/bandit/level14-15/</link>
      <pubDate>Thu, 17 Jun 2021 14:04:21 +0900</pubDate>
      
      <guid>https://tadakun8.github.io/post/over-the-wire/bandit/level14-15/</guid>
      <description>Level14 Goal  The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don’t get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working on
  パスワードは/etc/bandit_pass/bandit14にある bandit14ユーザでしかみることはできない このレベルではbandit14ユーザでSSHできるプライベートkeyを手に入れることができる  resolve bandit13@bandit:~$ cat sshkey.</description>
    </item>
    
    <item>
      <title>【OverTheWire奮闘記】Bandit: Level13</title>
      <link>https://tadakun8.github.io/post/over-the-wire/bandit/level13/</link>
      <pubDate>Wed, 16 Jun 2021 22:58:34 +0900</pubDate>
      
      <guid>https://tadakun8.github.io/post/over-the-wire/bandit/level13/</guid>
      <description>Level 13 Goal  The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work using mkdir. For example: mkdir /tmp/myname123. Then copy the datafile using cp, and rename it using mv (read the manpages!)
  パスワードはdata.txtにある data.txtは何回もhexdumpされている data.</description>
    </item>
    
    <item>
      <title>【OverTheWire奮闘記】Bandit: Level10〜12</title>
      <link>https://tadakun8.github.io/post/over-the-wire/bandit/level10-12/</link>
      <pubDate>Wed, 16 Jun 2021 19:30:01 +0900</pubDate>
      
      <guid>https://tadakun8.github.io/post/over-the-wire/bandit/level10-12/</guid>
      <description>Level 10 Goal  The password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several ‘=’ characters.
  パスワードはdata.txtの中にある 人間に読める形式で、いくつかの&amp;quot;=&amp;ldquo;という文字列が前にある  resolve bandit9@bandit:~$ strings data.txt | grep &#39;===&#39; ========== the*2i&amp;quot;4 ========== password Z)========== is &amp;amp;========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk bandit9@bandit:~$ exit # 以下はローカル $ ssh -l bandit10 -p 2220 bandit.labs.overthewire.org This is a OverTheWire game server. More information on http://www.overthewire.org/wargames bandit10@bandit.labs.overthewire.org&#39;s password: truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk resolveまでにやったこと とりあえずcat data.</description>
    </item>
    
    <item>
      <title>【OverTheWire奮闘記】Bandit: Level7〜9</title>
      <link>https://tadakun8.github.io/post/over-the-wire/bandit/level7-9/</link>
      <pubDate>Wed, 16 Jun 2021 12:39:36 +0900</pubDate>
      
      <guid>https://tadakun8.github.io/post/over-the-wire/bandit/level7-9/</guid>
      <description>Level 7 Goal  The password for the next level is stored somewhere on the server and has all of the following properties: owned by user bandit7, owned by group bandit6, 33 bytes in size
 サーバどこかにある以下の特徴を持ったファイルからパスワードを取得する
 オーナーがbandit7 グループがbandit6 33バイト  resolve bandit6@bandit:~$ find / -type f -user bandit7 -group bandit6 -size 33c -print0 2&amp;gt; /dev/null | xargs -0 -I{} cat {} cat: {}: No such file or directory HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs bandit6@bandit:~$ exit # 以下はローカルで $ ssh -l bandit7 -p 2220 bandit.</description>
    </item>
    
    <item>
      <title>【OverTheWire奮闘記】Bandit: Level4〜6</title>
      <link>https://tadakun8.github.io/post/over-the-wire/bandit/level4-6/</link>
      <pubDate>Tue, 15 Jun 2021 19:47:28 +0900</pubDate>
      
      <guid>https://tadakun8.github.io/post/over-the-wire/bandit/level4-6/</guid>
      <description>Level 4 Goal  The password for the next level is stored in a hidden file in the inhere directory.
  inhereディレクトリの隠しファイルからパスワードを取得する  resolve bandit3@bandit:~$ cd inhere/ bandit3@bandit:~/inhere$ ls -a . .. .hidden bandit3@bandit:~/inhere$ cat .hidden pIwrPrtPN36QITSp3EQaw936yaFoFgAB bandit3@bandit:~/inhere$ exit # ここからローカル $ ssh -l bandit4 -p 2220 bandit.labs.overthewire.org This is a OverTheWire game server. More information on http://www.overthewire.org/wargames bandit4@bandit.labs.overthewire.org&#39;s password: pIwrPrtPN36QITSp3EQaw936yaFoFgAB resolveまでにやったこと 特になし
Level 5  The password for the next level is stored in the only human-readable file in the inhere directory.</description>
    </item>
    
    <item>
      <title>【OverTheWire奮闘記】Bandit: Level0〜3</title>
      <link>https://tadakun8.github.io/post/over-the-wire/bandit/level0-3/</link>
      <pubDate>Sun, 13 Jun 2021 21:52:17 +0900</pubDate>
      
      <guid>https://tadakun8.github.io/post/over-the-wire/bandit/level0-3/</guid>
      <description>はじめに 僕もエンジニアの端くれではあるので、たまにQiitaで面白い記事を読んでます。いつも通りQiitaを見ているとこんな記事がありました
 イスラエル8200部隊出身のガチプロハッカーに、一流のハッカーになる方法について聞いてみた。  こういう記事を見るとなんだかワクワクします。
この記事の中で以下が気になり、
 ハッキングチャレンジはその名の通り、ハッキングを試してみることです。有名なのは『OverTheWire』でしょうか。
 少し調べてみると・・・ふむふむ、ゲーム形式でハッキングを練習し、セキュリティの知識を身につけることができるサイトのようだとわかりました。
ガチプロハッカーになるつもりはありませんが、こういった知識も身につけたいなと思ってはいたので、これを機会にこのOverTheWireで練習してみることにしました。
私の今の状態  セキュリティの知識はカッスカス 大学時代にセキュリティの講義受けたなぁ(遠い目)  Level 0 初心者はまずBandit(意味は盗賊)からスタートです
Goal  The goal of this level is for you to log into the game using SSH. The host to which you need to connect is bandit.labs.overthewire.org, on port 2220. The username is bandit0 and the password is bandit0. Once logged in, go to the Level 1 page to find out how to beat Level 1.</description>
    </item>
    
    <item>
      <title>curlコマンドの使い方</title>
      <link>https://tadakun8.github.io/post/usage-curl/</link>
      <pubDate>Sun, 13 Jun 2021 15:32:18 +0900</pubDate>
      
      <guid>https://tadakun8.github.io/post/usage-curl/</guid>
      <description>はじめに 同僚には凄腕のshell職人がいます。案件で、APIのクライアントにPostmanが推奨されているのですが、そのshell職人がcurlを使ってるのを隣で見てました。覚えたら手軽そうだなと思ったのでこれを機にcurlの使い方を覚えたいとのモチベがありました。
使い方 $ curl [OPTION] URL 使い方だけ見れば簡単ですが、curlに関わらずlinuxコマンドはオプションをどれだけ頭にインデックスするかだと思います。
ユースケースでオプション紹介 POSTしたい $ curl -X POST -d id=1 -d email=sample@example.com URL  -X : HTTPメソッドを指定できる -d : リクエストボディを指定できる  1つ1つ指定する =(イコール)で定義していく    ヘッダー情報を追加してリクエストしたい $ curl -H &amp;#39;Content-Type: application/json&amp;#39; URL # または $ curl --header &amp;#39;Content-Type: application/json&amp;#39; URL レスポンスヘッダ「だけ」表示したい $ curl -I URL # または $ curl --head URL レスポンスヘッダ「も」表示したい $ curl -i URL # または $ curl --include URL 詳細な情報も表示したい $ curl -v URL $ curl --verbose URL 余計な情報は表示したくない $ curl -s URL $ curl --silent URL curlは以下のような進捗状況を表示してくれますが、-sでこの表示を抑制します</description>
    </item>
    
    <item>
      <title>axiosの使い方</title>
      <link>https://tadakun8.github.io/post/usage-axios/</link>
      <pubDate>Sun, 13 Jun 2021 10:04:20 +0900</pubDate>
      
      <guid>https://tadakun8.github.io/post/usage-axios/</guid>
      <description>インストール方法 $ npm install axios GET, POST, PUT, DELETEリクエスト const responseGet = await axios.get(&amp;#39;http://example.com/api/sample&amp;#39;) const responsePost = await axios.post(&amp;#39;http://example.com/api/sample&amp;#39;, { id: 1 }) const responsePut = await axios.put(&amp;#39;http://example.com/api/sample&amp;#39;, { id: 1 }) const responseDelete = await axios.delete(&amp;#39;http://example.com/api/sample&amp;#39;, { id: 1 }) axiosでの共通設定をしたいとき // axiosを使う時の共通設定 const config: AxiosRequestConfig = { // axiosClient.get(&amp;#39;sample&amp;#39;)でhttp://example.com/api/sampleへのリクエストになるように設定  baseURL: &amp;#39;http://example.com/api/&amp;#39;, // タイムアウト(ミリ秒)  timeout: 1000, // カスタムヘッダーも定義できる  headers: { &amp;#39;Authorization&amp;#39;: &amp;#39;sample-token&amp;#39;, } } // 共通設定をしたaxiosインスタンスの生成 const axiosClient: AxiosInstance = axios.</description>
    </item>
    
    <item>
      <title>コミットメッセージを変更する</title>
      <link>https://tadakun8.github.io/post/git-change-commit-message/</link>
      <pubDate>Sun, 13 Jun 2021 09:16:53 +0900</pubDate>
      
      <guid>https://tadakun8.github.io/post/git-change-commit-message/</guid>
      <description>はじめに 開発が進んでいくと、コミットメッセージを変更したいなぁということがあると思います。また、「このコミットメッセージわかりにくい」と言われることもあるでしょう。特に、2つ以上前のコミットメッセージを変える方法はいつも調べているので、記事にしました。
直近のコミットメッセージを変更する場合 git commit --amendで修正できます
想定するケース [~/workspace/sample] ❯❯❯ git log --oneline --no-decorate c7c87bd commit 4 ← 番号がずれてしまった 8b72c5c commit 2 13ba7d2 commit 1 直近のコミットメッセージの番号がずれていますので、commit 4 を commit 3に修正しましょう
修正 直近のコミットメッセージを変更する場合は以下のコマンドですぐ変更できます
$ git commit --amend そうするとvimが起動するので、commit 4 を commit 3に変更しましょう。
変更後に確認すると、意図した結果になってます
[~/workspace/sample] ❯❯❯ git log --oneline --no-decorate af9e74a commit 3 8b72c5c commit 2 13ba7d2 commit 1 2つ以上前のコミットメッセージを変更する場合 いよいよ本題です。こちらはgit rebaseを使って修正します。
想定するケース コミットの履歴を以下だとしましょう
[~/workspace/sample] ❯❯❯ git log --oneline --no-decorate 0638aca commit 5 cb1a280 commit 4 2572e35 commit 3 b1ce602 commit 22 13ba7d2 commit 1 commit 2 のつもりが commit 22 となっています</description>
    </item>
    
    <item>
      <title>commitをまとめる</title>
      <link>https://tadakun8.github.io/post/git-put-together-commits/</link>
      <pubDate>Sat, 12 Jun 2021 20:58:32 +0900</pubDate>
      
      <guid>https://tadakun8.github.io/post/git-put-together-commits/</guid>
      <description>はじめに コミットのまとめ方を毎回調べているのでメモ
直前のコミットをまとめる場合 現在のコミットが以下だと仮定します
[~/workspace/sample] ❯❯❯ git log --oneline --no-decorate 7a0470f commit 5 ce15d24 commit 4 346c3f2 commit 3 894afa7 commit 2 31bea46 commit 1  --oneline : 各コミットを1行で表示する --no-decorate : 余計な装飾を消す 1  以下の状態になるようにコミットをまとめてみましょう
[~/workspace/sample] ❯❯❯ git log --oneline --no-decorate d8feda4 commit 5、4、3をまとめました 894afa7 commit 2 31bea46 commit 1 手順 $ git rebase -i HEAD~3 # 直前の3つコミットをrebase 何も設定していなければvimが起動し、以下が表示されます
[~/workspace/sample] ❯❯❯ git rebase -i HEAD~3 [master] hint: Waiting for your editor to close the file.</description>
    </item>
    
    <item>
      <title>Swaggerでモックサーバを立てる</title>
      <link>https://tadakun8.github.io/post/creating-a-mock-server-with-swagger/</link>
      <pubDate>Thu, 10 Jun 2021 21:15:14 +0900</pubDate>
      
      <guid>https://tadakun8.github.io/post/creating-a-mock-server-with-swagger/</guid>
      <description>はじめに ここでは、Swaggerで定義したAPIからモックサーバを立てる方法を書いていきます。SwaggerのDockerイメージを利用してモックサーバを構築する方法もありますが、ここではSwagger Editorを使用する方法について書きます。
手順 モックサーバファイルをダウンロード モックサーバをローカルで立ち上げるために必要なファイルをダウンロードします
  まずはswagger editorにアクセスしてください
  上部のGenerate Serverをクリックしてどの言語でモックサーバを立てるかを選んでください
 この記事ではnodejs-serverを選択した想定で進みます    選択するとzipファイルがダウンロードされるので、任意のフォルダで展開してください
  swagger.yamlを修正 ローカルでAPIを叩けるようにするために、api/swagger.yamlを変更する必要があります。 具体的にはappフォルダにあるswagger.yamlのhostとschemasの値を変更します。
- host: &amp;#34;petstore.swagger.io&amp;#34; + host: &amp;#34;localhost:8080&amp;#34;  schemes: - &amp;#34;https&amp;#34; ← これを消す - &amp;#34;http&amp;#34; 必要なモジュールのインストール $ npm install  展開したディレクトリのpackage.jsonがあるディレクトリ内でこのコマンドを叩いてください  モックサーバを立ち上げる 同じディレクトリで以下のコマンドを叩いてサーバを立ち上げます
$ npm run start http://localhost:8080/docs/にアクセスすると、Swagger UIが立ち上がるはずです。Swagger UIで試してみても良いですし、ブラウザの検索窓からhttp://localhost:8080/v2/pet/3と叩けばjsonのレスポンスが返ってくることを確認できるはずです
このあとは・・・？ この手順で使用したAPIはSwagger Editor用意したサンプルのAPIになります。swagger.yamlを修正し、プロジェクトに必要なAPIを定義していけばよいでしょう。
また、フロントエンドの確認をしたい場合はリクエスト先をhttp://localhost:8080/v2/pet/3のようにしてあげれば、バックエンドが実装されていなくても、フロントエンドの確認をすることができますね！
Swagger本来の用途であるAPI仕様書としても使用できるので、このフォルダをgit管理してプロジェクトで共有するということをおすすめします。
参考  外部連携APIのモックサーバをSwaggerを利用して作る  </description>
    </item>
    
    <item>
      <title>jsconfig.jsonとは？</title>
      <link>https://tadakun8.github.io/post/what-is-jsconfig-json/</link>
      <pubDate>Thu, 10 Jun 2021 19:59:50 +0900</pubDate>
      
      <guid>https://tadakun8.github.io/post/what-is-jsconfig-json/</guid>
      <description>Conclusion jsconfig.jsonとはvscodeでjavascriptを書くときに便利にコーディングできるようにする設定ファイルのことです
example 以下は、create-nuxt-appコマンドで作成されたjsconfig.jsonの例
{ &amp;#34;compilerOptions&amp;#34;: { &amp;#34;baseUrl&amp;#34;: &amp;#34;.&amp;#34;, &amp;#34;paths&amp;#34;: { &amp;#34;~/*&amp;#34;: [&amp;#34;./*&amp;#34;], &amp;#34;@/*&amp;#34;: [&amp;#34;./*&amp;#34;], &amp;#34;~~/*&amp;#34;: [&amp;#34;./*&amp;#34;], &amp;#34;@@/*&amp;#34;: [&amp;#34;./*&amp;#34;] } }, &amp;#34;exclude&amp;#34;: [&amp;#34;node_modules&amp;#34;, &amp;#34;.nuxt&amp;#34;, &amp;#34;dist&amp;#34;] } Remarks  typescriptの場合はtsconfig.jsonになる  Reference  jsconfig.json(公式ページ) 【TypeScript】TSConfigの基礎 tsconfig.jsonのrootDirとbaseUrlに関するメモ [TypeScript] tsconfig.jsonの全オプションを理解する（随時追加中）  </description>
    </item>
    
    <item>
      <title>ブログはじめました</title>
      <link>https://tadakun8.github.io/post/start-blog/</link>
      <pubDate>Tue, 08 Jun 2021 23:41:15 +0900</pubDate>
      
      <guid>https://tadakun8.github.io/post/start-blog/</guid>
      <description>はじまりはじまり</description>
    </item>
    
  </channel>
</rss>
