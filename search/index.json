[{"content":"はじめに ここでは、Swaggerで定義したAPIからモックサーバを立てる方法を書いていきます。Swaggerのイメージを利用して、Dockerでモックサーバを構築する方法もありますが、ここではSwagger Editorを使用する方法について書きます。\n手順 モックサーバファイルをダウンロード モックサーバをローカルで立ち上げるために必要なファイルをダウンロードします\n  まずはswagger editorにアクセスしてください\n  上部のGenerate Serverをクリックしてどの言語でモックサーバを立てるかを選んでください\n この記事ではnodejs-serverを選択した想定で進みます    選択するとzipファイルがダウンロードされるので、任意のフォルダで展開してください\n  swagger.yamlを修正 ローカルでAPIを叩けるようにするために、api/swagger.yamlを変更する必要があります 具体的にはappフォルダにあるswagger.yamlのhostとschemasの値を変更します\n- host: \u0026#34;petstore.swagger.io\u0026#34; + host: \u0026#34;localhost:8080\u0026#34;  schemes: - \u0026#34;https\u0026#34; ← これを消す - \u0026#34;http\u0026#34; 必要なモジュールのインストール $ npm install  展開したディレクトリのpackage.jsonがあるディレクトリ内でこのコマンドを叩いてください  モックサーバを立ち上げる 同じディレクトリで以下のコマンドを叩いてサーバを立ち上げます\n$ npm run start http://localhost:8080/docs/にアクセスすると、Swagger UIが立ち上がるはずです。Swagger UIで試してみても良いですし、ブラウザの検索窓からhttp://localhost:8080/v2/pet/3と叩けばjsonのレスポンスが返ってくることを確認できるはずです\nこのあとは・・・？ この手順で使用したAPIはSwagger Editor用意したサンプルのAPIになります。swagger.yamlを修正し、プロジェクトに必要なAPIを定義していけばよいでしょう。\nまた、フロントエンドの確認をしたい場合はリクエスト先をhttp://localhost:8080/v2/pet/3のようにしてあげれば、バックエンドが実装されていなくても、フロントエンドの確認をすることができますね！\nSwagger本来の用途であるAPI仕様書としても使用できるので、このフォルダをgit管理してプロジェクトで共有するということをおすすめします。\n参考  外部連携APIのモックサーバをSwaggerを利用して作る  ","date":"2021-06-10T21:15:14+09:00","permalink":"https://tadakun8.github.io/post/creating-a-mock-server-with-swagger/","title":"Swaggerでモックサーバを立てる"},{"content":"Conclusion jsconfig.jsonとはvscodeでjavascriptを書くときに便利にコーディングできるようにする設定ファイルのことです\nexample 以下は、create-nuxt-appコマンドで作成されたjsconfig.jsonの例\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;baseUrl\u0026#34;: \u0026#34;.\u0026#34;, \u0026#34;paths\u0026#34;: { \u0026#34;~/*\u0026#34;: [\u0026#34;./*\u0026#34;], \u0026#34;@/*\u0026#34;: [\u0026#34;./*\u0026#34;], \u0026#34;~~/*\u0026#34;: [\u0026#34;./*\u0026#34;], \u0026#34;@@/*\u0026#34;: [\u0026#34;./*\u0026#34;] } }, \u0026#34;exclude\u0026#34;: [\u0026#34;node_modules\u0026#34;, \u0026#34;.nuxt\u0026#34;, \u0026#34;dist\u0026#34;] } Remarks  typescriptの場合はtsconfig.jsonになる  Reference  jsconfig.json(公式ページ) 【TypeScript】TSConfigの基礎 tsconfig.jsonのrootDirとbaseUrlに関するメモ [TypeScript] tsconfig.jsonの全オプションを理解する（随時追加中）  ","date":"2021-06-10T19:59:50+09:00","permalink":"https://tadakun8.github.io/post/what-is-jsconfig-json/","title":"jsconfig.jsonとは？"},{"content":"はじまりはじまり\n","date":"2021-06-08T23:41:15+09:00","permalink":"https://tadakun8.github.io/post/start-blog/","title":"ブログはじめました"}]