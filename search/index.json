[{"content":"はじめに コミットのまとめ方を毎回調べているのでメモ\n直前のコミットをまとめる場合 現在のコミットが以下だと仮定します\n[~/workspace/sample] ❯❯❯ git log --oneline --no-decorate 7a0470f commit 5 ce15d24 commit 4 346c3f2 commit 3 894afa7 commit 2 31bea46 commit 1  --oneline : 各コミットを1行で表示する --no-decorate : 余計な装飾を消す 1  以下の状態になるようにコミットをまとめてみましょう\n[~/workspace/sample] ❯❯❯ git log --oneline --no-decorate d8feda4 commit 5、4、3をまとめました 894afa7 commit 2 31bea46 commit 1 手順 $ git rebase -i HEAD~3 # 直前の3つコミットをrebase 何も設定していなければvimが起動し、以下が表示されます\n[~/workspace/sample] ❯❯❯ git rebase -i HEAD~3 [master] hint: Waiting for your editor to close the file... pick 346c3f2 commit 3 pick ce15d24 commit 4 pick 7a0470f commit 5 # Rebase 894afa7..7a0470f onto 894afa7 (3 commands) # # Commands: # p, pick \u0026lt;commit\u0026gt; = use commit # r, reword \u0026lt;commit\u0026gt; = use commit, but edit the commit message # e, edit \u0026lt;commit\u0026gt; = use commit, but stop for amending # s, squash \u0026lt;commit\u0026gt; = use commit, but meld into previous commit # f, fixup \u0026lt;commit\u0026gt; = like \u0026quot;squash\u0026quot;, but discard this commit's log message # x, exec \u0026lt;command\u0026gt; = run command (the rest of the line) using shell # b, break = stop here (continue rebase later with 'git rebase --continue') # d, drop \u0026lt;commit\u0026gt; = remove commit # l, label \u0026lt;label\u0026gt; = label current HEAD with a name # t, reset \u0026lt;label\u0026gt; = reset HEAD to a label # m, merge [-C \u0026lt;commit\u0026gt; | -c \u0026lt;commit\u0026gt;] \u0026lt;label\u0026gt; [# \u0026lt;oneline\u0026gt;] # . create a merge commit using the original merge commit's # . message (or the oneline, if no original merge commit was # . specified). Use -c \u0026lt;commit\u0026gt; to reword the commit message. # # These lines can be re-ordered; they are executed from top to bottom. # # If you remove a line here THAT COMMIT WILL BE LOST. # # However, if you remove everything, the rebase will be aborted. # # Note that empty commits are commented out 次に、まとめたいコミットを pick から s(またはsquash) に変更します。イメージ的にはcommit 4とcommit 5をcommit 3にまとめるようなイメージです\npick 346c3f2 commit 3 - pick ce15d24 commit 4 - pick 7a0470f commit 5  pick 346c3f2 commit 3 + s ce15d24 commit 4 + s 7a0470f commit 5 保存すると、まとめたコミットのコミットメッセージを入力する画面が表示されます\n# This is a combination of 3 commits. # This is the 1st commit message: commit 3 # This is the commit message #2: commit 4 # This is the commit message #3: commit 5 #がついていないものがコミットメッセージとして適用されます。なので今回はこれらを消して以下のメッセージに修正します\ncommit 5、4、3をまとめました これで保存すると想定通りコミットがまとまりました\n[~/workspace/sample] ❯❯❯ git log --oneline --no-decorate d8feda4 commit 5、4、3をまとめました 894afa7 commit 2 31bea46 commit 1 離れたコミットをまとめる場合 現在のコミットが以下だと仮定します\n[~/workspace/sample] ❯❯❯ git log --oneline --no-decorate 7a0470f commit 5 ce15d24 commit 4 346c3f2 commit 3 894afa7 commit 2 31bea46 commit 1 以下の状態になるようにコミットをまとめてみましょう\n[~/workspace/sample] ❯❯❯ git log --oneline --no-decorate 7a0470f commit 5 ce15d24 commit 4 bc9ff20 commit 2, 3をまとめました 894afa7 commit 1 手順 手順としては先ほどと同様です。イメージとしてはcommit3をコミット2にまとめるようなイメージを持ってください。なので、commit3のpickをs(squash)に変更してあげましょう。\n$ git rebase -i 894afa7 # 引数にコミットIDを指定するとその次のコミット(ここではcommit2)までがrebaseの範囲になる 表示されるvim画面は以下になります\npick 894afa7 commit 2 pick 346c3f2 commit 3 pick ce15d24 commit 4 pick 7a0470f commit 5 # Rebase 31bea46..7a0470f onto 7a0470f (4 commands) # # Commands: # p, pick \u0026lt;commit\u0026gt; = use commit # r, reword \u0026lt;commit\u0026gt; = use commit, but edit the commit message # e, edit \u0026lt;commit\u0026gt; = use commit, but stop for amending # s, squash \u0026lt;commit\u0026gt; = use commit, but meld into previous commit # f, fixup \u0026lt;commit\u0026gt; = like \u0026quot;squash\u0026quot;, but discard this commit's log message # x, exec \u0026lt;command\u0026gt; = run command (the rest of the line) using shell # b, break = stop here (continue rebase later with 'git rebase --continue') # d, drop \u0026lt;commit\u0026gt; = remove commit # l, label \u0026lt;label\u0026gt; = label current HEAD with a name # t, reset \u0026lt;label\u0026gt; = reset HEAD to a label # m, merge [-C \u0026lt;commit\u0026gt; | -c \u0026lt;commit\u0026gt;] \u0026lt;label\u0026gt; [# \u0026lt;oneline\u0026gt;] # . create a merge commit using the original merge commit's # . message (or the oneline, if no original merge commit was # . specified). Use -c \u0026lt;commit\u0026gt; to reword the commit message. # いつものようにまとめたいコミットのpickを**s(またはsquash)**に変更しましょう\npick 894afa7 commit 2 - pick 346c3f2 commit 3 pick ce15d24 commit 4 pick 7a0470f commit 5 pick 894afa7 commit 2 + s 346c3f2 commit 3 pick ce15d24 commit 4 pick 7a0470f commit 5 保存して、コミットメッセージをcommit 2, 3をまとめましたと書けば想定した結果になるはずです\n[~/workspace/sample] ❯❯❯ git log --oneline --no-decorate f5cade0 commit 5 04ac645 commit 4 bc9ff20 commit 2, 3をまとめました 31bea46 commit 1 このあとは・・・？ 変更が終わったら、リモートリポジトリにpushしましょう。\nただ、rebaseした後にリモートリポジトリにpushしようとするとエラーがでます。ローカルとリモートの履歴が異なるので当たり前ですね。その場合はgit push -f origin ブランチ名でpushできます。\n ただし、git push -f はリモートリポジトリに現在のブランチの状態を強制的にpushします。リモートリポジトリの状態を強制的に変更するコマンドなので、必ず今の変更があっているかを確かめてから使うようにしてください。  参考  rebase -i でコミットをまとめる   git rebase -iでgitのコミットをまとめる    このオプションをつけないと最新のcommitが7a0470f (HEAD -\u0026gt; master) commit 5と表示されます。ここでは表示をわかりやすくするために、このオプションをつけました\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-06-12T20:58:32+09:00","image":"https://tadakun8.github.io/post/git-put-together-commits/git_hu10f4824aa557e0c7b4f2ec1dc4ef34d0_28593_120x120_fill_box_smart1_2.png","permalink":"https://tadakun8.github.io/post/git-put-together-commits/","title":"commitをまとめる"},{"content":"はじめに ここでは、Swaggerで定義したAPIからモックサーバを立てる方法を書いていきます。SwaggerのDockerイメージを利用してモックサーバを構築する方法もありますが、ここではSwagger Editorを使用する方法について書きます。\n手順 モックサーバファイルをダウンロード モックサーバをローカルで立ち上げるために必要なファイルをダウンロードします\n  まずはswagger editorにアクセスしてください\n  上部のGenerate Serverをクリックしてどの言語でモックサーバを立てるかを選んでください\n この記事ではnodejs-serverを選択した想定で進みます    選択するとzipファイルがダウンロードされるので、任意のフォルダで展開してください\n  swagger.yamlを修正 ローカルでAPIを叩けるようにするために、api/swagger.yamlを変更する必要があります。 具体的にはappフォルダにあるswagger.yamlのhostとschemasの値を変更します。\n- host: \u0026#34;petstore.swagger.io\u0026#34; + host: \u0026#34;localhost:8080\u0026#34;  schemes: - \u0026#34;https\u0026#34; ← これを消す - \u0026#34;http\u0026#34; 必要なモジュールのインストール $ npm install  展開したディレクトリのpackage.jsonがあるディレクトリ内でこのコマンドを叩いてください  モックサーバを立ち上げる 同じディレクトリで以下のコマンドを叩いてサーバを立ち上げます\n$ npm run start http://localhost:8080/docs/にアクセスすると、Swagger UIが立ち上がるはずです。Swagger UIで試してみても良いですし、ブラウザの検索窓からhttp://localhost:8080/v2/pet/3と叩けばjsonのレスポンスが返ってくることを確認できるはずです\nこのあとは・・・？ この手順で使用したAPIはSwagger Editor用意したサンプルのAPIになります。swagger.yamlを修正し、プロジェクトに必要なAPIを定義していけばよいでしょう。\nまた、フロントエンドの確認をしたい場合はリクエスト先をhttp://localhost:8080/v2/pet/3のようにしてあげれば、バックエンドが実装されていなくても、フロントエンドの確認をすることができますね！\nSwagger本来の用途であるAPI仕様書としても使用できるので、このフォルダをgit管理してプロジェクトで共有するということをおすすめします。\n参考  外部連携APIのモックサーバをSwaggerを利用して作る  ","date":"2021-06-10T21:15:14+09:00","image":"https://tadakun8.github.io/post/creating-a-mock-server-with-swagger/swagger_hud0891c2854f0c20622944d709dd43a21_23653_120x120_fill_q75_box_smart1.jpg","permalink":"https://tadakun8.github.io/post/creating-a-mock-server-with-swagger/","title":"Swaggerでモックサーバを立てる"},{"content":"Conclusion jsconfig.jsonとはvscodeでjavascriptを書くときに便利にコーディングできるようにする設定ファイルのことです\nexample 以下は、create-nuxt-appコマンドで作成されたjsconfig.jsonの例\n{ \u0026#34;compilerOptions\u0026#34;: { \u0026#34;baseUrl\u0026#34;: \u0026#34;.\u0026#34;, \u0026#34;paths\u0026#34;: { \u0026#34;~/*\u0026#34;: [\u0026#34;./*\u0026#34;], \u0026#34;@/*\u0026#34;: [\u0026#34;./*\u0026#34;], \u0026#34;~~/*\u0026#34;: [\u0026#34;./*\u0026#34;], \u0026#34;@@/*\u0026#34;: [\u0026#34;./*\u0026#34;] } }, \u0026#34;exclude\u0026#34;: [\u0026#34;node_modules\u0026#34;, \u0026#34;.nuxt\u0026#34;, \u0026#34;dist\u0026#34;] } Remarks  typescriptの場合はtsconfig.jsonになる  Reference  jsconfig.json(公式ページ) 【TypeScript】TSConfigの基礎 tsconfig.jsonのrootDirとbaseUrlに関するメモ [TypeScript] tsconfig.jsonの全オプションを理解する（随時追加中）  ","date":"2021-06-10T19:59:50+09:00","permalink":"https://tadakun8.github.io/post/what-is-jsconfig-json/","title":"jsconfig.jsonとは？"},{"content":"はじまりはじまり\n","date":"2021-06-08T23:41:15+09:00","permalink":"https://tadakun8.github.io/post/start-blog/","title":"ブログはじめました"}]